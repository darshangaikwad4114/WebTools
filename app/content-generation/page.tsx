'use client';

import { motion } from 'framer-motion';
import { useState } from 'react';
import { Wand2, Type, Image as ImageIcon, Video, Sparkles, Copy, Download, RefreshCw, BookOpen, MessageSquare, Mail, Megaphone } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useAuth } from '@/hooks/useAuth';
import { toast } from 'sonner';
import AuthModal from '@/components/AuthModal';

export default function ContentGeneration() {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState('');
  const [showAuthModal, setShowAuthModal] = useState(false);
  const [formData, setFormData] = useState({
    contentType: 'Blog Post',
    prompt: '',
    tone: 'Professional',
    length: 'Medium (300-500 words)',
  });

  const { user } = useAuth();

  const contentTypes = [
    {
      id: 'text',
      icon: Type,
      title: 'Text Generation',
      description: 'Create articles, blog posts, social media content, and more',
      gradient: 'from-purple-600 to-pink-600',
    },
    {
      id: 'image',
      icon: ImageIcon,
      title: 'Image Generation',
      description: 'Generate stunning visuals and artwork with AI',
      gradient: 'from-blue-600 to-cyan-600',
    },
    {
      id: 'video',
      icon: Video,
      title: 'Video Generation',
      description: 'Create engaging video content automatically',
      gradient: 'from-green-600 to-emerald-600',
    },
  ];

  const contentTemplates = [
    {
      type: 'Blog Post',
      icon: BookOpen,
      description: 'Long-form articles and blog content',
      example: 'Write a comprehensive guide about sustainable living practices'
    },
    {
      type: 'Social Media Post',
      icon: MessageSquare,
      description: 'Engaging posts for social platforms',
      example: 'Create an inspiring post about productivity tips'
    },
    {
      type: 'Email Subject Line',
      icon: Mail,
      description: 'Compelling email subject lines',
      example: 'Generate subject lines for a product launch email'
    },
    {
      type: 'Marketing Copy',
      icon: Megaphone,
      description: 'Persuasive marketing content',
      example: 'Write compelling copy for a new software product'
    },
  ];

  const handleGenerate = async () => {
    if (!user) {
      setShowAuthModal(true);
      return;
    }

    if (!formData.prompt.trim()) {
      toast.error('Please enter a prompt');
      return;
    }

    setIsGenerating(true);
    
    try {
      // Simulate content generation
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const mockContent = `# ${formData.contentType}

${formData.prompt}

This is a sample generated content based on your prompt. In a real application, this would be generated by an AI model based on your specific requirements.

Key points covered:
- Introduction to the topic
- Main content sections
- Conclusion and next steps

The content is written in a ${formData.tone.toLowerCase()} tone and follows the ${formData.length.toLowerCase()} format as requested.`;

      setGeneratedContent(mockContent);
      toast.success('Content generated successfully!');
    } catch (error: any) {
      toast.error('Failed to generate content');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(generatedContent);
      toast.success('Content copied to clipboard!');
    } catch (error) {
      toast.error('Failed to copy content');
    }
  };

  const handleDownload = () => {
    const blob = new Blob([generatedContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `generated-content-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('Content downloaded!');
  };

  const handleTemplateSelect = (template: any) => {
    setFormData(prev => ({
      ...prev,
      contentType: template.type,
      prompt: template.example
    }));
  };

  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
        {/* Header */}
        <section className="py-16">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="text-center mb-12"
            >
              <div className="inline-flex items-center space-x-2 bg-purple-100 text-purple-700 px-4 py-2 rounded-full text-sm font-medium mb-6">
                <Sparkles className="w-4 h-4" />
                <span>AI-Powered Content Creation</span>
              </div>
              <h1 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">
                <span className="bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
                  Content Generation
                </span>
              </h1>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto">
                Unleash your creativity with AI-powered content generation. Create text, images, 
                and videos that captivate your audience and bring your ideas to life.
              </p>
            </motion.div>

            {/* Content Type Selection */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
              {contentTypes.map((type, index) => {
                const Icon = type.icon;
                return (
                  <motion.div
                    key={type.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                    whileHover={{ scale: 1.02 }}
                  >
                    <Card className="h-full border-2 border-gray-100 hover:border-purple-200 transition-all duration-300 hover:shadow-lg cursor-pointer">
                      <CardHeader className="text-center">
                        <div className={`w-12 h-12 rounded-lg bg-gradient-to-r ${type.gradient} flex items-center justify-center mx-auto mb-4`}>
                          <Icon className="w-6 h-6 text-white" />
                        </div>
                        <CardTitle className="text-lg font-bold">{type.title}</CardTitle>
                        <CardDescription className="text-sm text-gray-600">
                          {type.description}
                        </CardDescription>
                      </CardHeader>
                    </Card>
                  </motion.div>
                );
              })}
            </div>

            {/* Content Templates */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
              className="mb-8"
            >
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Quick Start Templates</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                {contentTemplates.map((template, index) => {
                  const Icon = template.icon;
                  return (
                    <Card 
                      key={template.type}
                      className="cursor-pointer hover:shadow-md transition-shadow duration-200 border-2 hover:border-purple-200"
                      onClick={() => handleTemplateSelect(template)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-center space-x-3 mb-2">
                          <Icon className="w-5 h-5 text-purple-600" />
                          <h4 className="font-medium text-gray-900">{template.type}</h4>
                        </div>
                        <p className="text-sm text-gray-600 mb-2">{template.description}</p>
                        <p className="text-xs text-gray-500 italic">"{template.example}"</p>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </motion.div>

            {/* Generation Interface */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4 }}
            >
              <Card className="max-w-4xl mx-auto">
                <CardHeader>
                  <CardTitle className="flex items-center space-x-2">
                    <Wand2 className="w-5 h-5 text-purple-600" />
                    <span>AI Content Generator</span>
                  </CardTitle>
                  <CardDescription>
                    Describe what you want to create and let our AI bring it to life
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <Tabs defaultValue="text" className="w-full">
                    <TabsList className="grid w-full grid-cols-3">
                      <TabsTrigger value="text">Text</TabsTrigger>
                      <TabsTrigger value="image">Image</TabsTrigger>
                      <TabsTrigger value="video">Video</TabsTrigger>
                    </TabsList>
                    
                    <TabsContent value="text" className="space-y-6">
                      <div className="space-y-4">
                        <div>
                          <Label htmlFor="content-type">Content Type</Label>
                          <select 
                            id="content-type"
                            value={formData.contentType}
                            onChange={(e) => setFormData(prev => ({ ...prev, contentType: e.target.value }))}
                            className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                          >
                            <option>Blog Post</option>
                            <option>Social Media Post</option>
                            <option>Product Description</option>
                            <option>Email Subject Line</option>
                            <option>Marketing Copy</option>
                          </select>
                        </div>
                        
                        <div>
                          <Label htmlFor="prompt">Describe your content</Label>
                          <Textarea
                            id="prompt"
                            placeholder="Write a blog post about sustainable living tips for beginners..."
                            className="mt-1 min-h-[120px]"
                            value={formData.prompt}
                            onChange={(e) => setFormData(prev => ({ ...prev, prompt: e.target.value }))}
                          />
                        </div>
                        
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <Label htmlFor="tone">Tone</Label>
                            <select 
                              id="tone"
                              value={formData.tone}
                              onChange={(e) => setFormData(prev => ({ ...prev, tone: e.target.value }))}
                              className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                            >
                              <option>Professional</option>
                              <option>Casual</option>
                              <option>Friendly</option>
                              <option>Formal</option>
                              <option>Creative</option>
                            </select>
                          </div>
                          
                          <div>
                            <Label htmlFor="length">Length</Label>
                            <select 
                              id="length"
                              value={formData.length}
                              onChange={(e) => setFormData(prev => ({ ...prev, length: e.target.value }))}
                              className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                            >
                              <option>Short (100-200 words)</option>
                              <option>Medium (300-500 words)</option>
                              <option>Long (600-1000 words)</option>
                            </select>
                          </div>
                        </div>
                      </div>

                      <Button 
                        onClick={handleGenerate}
                        disabled={isGenerating}
                        className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
                      >
                        {isGenerating ? (
                          <>
                            <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                            Generating...
                          </>
                        ) : (
                          <>
                            <Wand2 className="w-4 h-4 mr-2" />
                            Generate Content
                          </>
                        )}
                      </Button>

                      {generatedContent && (
                        <motion.div
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          className="mt-6"
                        >
                          <div className="bg-gray-50 rounded-lg p-6">
                            <div className="flex justify-between items-center mb-4">
                              <h3 className="text-lg font-semibold text-gray-900">Generated Content</h3>
                              <div className="flex space-x-2">
                                <Button variant="outline" size="sm" onClick={handleCopy}>
                                  <Copy className="w-4 h-4 mr-2" />
                                  Copy
                                </Button>
                                <Button variant="outline" size="sm" onClick={handleDownload}>
                                  <Download className="w-4 h-4 mr-2" />
                                  Export
                                </Button>
                              </div>
                            </div>
                            <div className="prose max-w-none">
                              <pre className="whitespace-pre-wrap text-gray-700 leading-relaxed font-sans">
                                {generatedContent}
                              </pre>
                            </div>
                          </div>
                        </motion.div>
                      )}
                    </TabsContent>
                    
                    <TabsContent value="image" className="space-y-6">
                      <div className="text-center py-12">
                        <ImageIcon className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">Image Generation</h3>
                        <p className="text-gray-600">Coming soon! Generate stunning visuals with AI.</p>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="video" className="space-y-6">
                      <div className="text-center py-12">
                        <Video className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                        <h3 className="text-lg font-semibold text-gray-900 mb-2">Video Generation</h3>
                        <p className="text-gray-600">Coming soon! Create engaging videos automatically.</p>
                      </div>
                    </TabsContent>
                  </Tabs>
                </CardContent>
              </Card>
            </motion.div>
          </div>
        </section>
      </div>

      <AuthModal isOpen={showAuthModal} onClose={() => setShowAuthModal(false)} />
    </>
  );
}